from BCI import *
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np
import time
import threading
import queue

# === Set up real Muse source and pipe ===
source = BCI("MuseS")
server, serverThread = source.launch_server_osc()
pipe = Pipe(1, len(source.BCI_params["channel_names"]), source.store, source.time_store)
pipe.launch_server()

# Create figure for PSD visualization
fig, ax = plt.subplots(figsize=(10, 6))
ax.set_title('Real-Time EEG Power Spectral Density')
ax.set_xlabel('Frequency (Hz)')
ax.set_ylabel('Power (μV²/Hz)')
ax.set_xlim(0, 60)  # Display frequencies up to 60 Hz
ax.set_ylim(0, 200)  # Adjust based on your data
ax.grid(True)

# Initialize lines for each channel
channel_colors = ['purple', 'blue', 'green', 'orange']
lines = []
for i in range(len(source.BCI_params["channel_names"])):
    line, = ax.plot([], [], color=channel_colors[i], 
                   label=f'Channel {source.BCI_params["channel_names"][i]}')
    lines.append(line)
ax.legend()

# Create a queue to store PSD data from the processing thread
psd_queue = queue.Queue()

# Process data and calculate PSD
def process_psd():
    # This will loop continuously, calculating PSD and putting results in the queue
    while True:
        try:
            # Get the latest PSD data from your pipe
            print("processing")
            for ch in range(len(source.BCI_params["channel_names"])):
                if not pipe.psd_processor.psd_store[ch].empty():
                    print("were in")
                    # Get PSD data (frequencies and power values)
                    freqs, psd_values = pipe.psd_processor.psd_store[ch].get()
                    
                    # Put the data in our visualization queue
                    psd_queue.put((ch, freqs, psd_values))
            
            # Sleep briefly to prevent CPU hogging
            time.sleep(0.1)
            
        except Exception as e:
            print(f"Error in PSD processing: {e}")
            time.sleep(0.5)

def normalize_psd(psd_values):
    psd_normalized = psd_values / np.max(psd_values) if np.max(psd_values) > 0 else psd_values
    return psd_normalized

# Animation update function
def update(frame):
    # Get all available PSD data
    changed = False
    while not psd_queue.empty():
        ch, freqs, psd_values = psd_queue.get()
        lines[ch].set_data(freqs, psd_values)
        changed = True
    
    # If we got new data, adjust y-axis if needed
    if changed:
        ax.relim()
        ax.autoscale_view(scalex=False)  # only autoscale y-axis
    
    return lines

# Start PSD processing in a separate thread
psd_thread = threading.Thread(target=process_psd, daemon=True)
psd_thread.start()

# Start animation
ani = animation.FuncAnimation(fig, update, interval=100, blit=False)
plt.show()