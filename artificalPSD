from BCI import *
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np
import time
import threading
import queue

# === Set up artificial signal source ===
# Custom parameters for more interesting artificial signals
 
artificial_params = {
    "frequencies": [40.0, 40.0, 40.0, 40.0],  # Hz - different freq for each channel
    "amplitudes": [50.0, 50.0, 50.0, 50.0],  # µV - different amplitude for each channel
    "noise_level": 0.0,  # µV - background noise level
    "dc_offset": [0.0, 0.0, 0.0, 0.0]  # DC offset for each channel
}

# Initialize BCI with artificial signal generation
source = BCI("MuseS", is_artificial=True, artificial_signal_params=artificial_params)
_, server_thread = source.launch_server()  # This starts the artificial signal generator

# Create the processing pipeline
# pipe = Pipe(1, len(source.BCI_params["channel_names"]), source.store, source.time_store)
# pipe.launch_server()

print(source.store[0].get())
PSD = PSDProcessor(
            no_of_input_channels=len(source.BCI_params["channel_names"]),
            sampling_frequency=500,  # Match your actual sampling rate
            window_size=256,        # Adjust as needed for frequency resolution
            input_store=source.store,  # Process after notch filtering
            overlap=0.75             # 75% overlap for smoother updates
        )
PSD.launch_server()

# Create figure for PSD visualization
fig, ax = plt.subplots(figsize=(10, 6))
ax.set_title('Real-Time EEG Power Spectral Density (Artificial Signals)')
ax.set_xlabel('Frequency (Hz)')
ax.set_ylabel('Power (μV²/Hz)')
ax.set_xlim(0, 60)  # Display frequencies up to 60 Hz
ax.set_ylim(0, 15)  # Adjusted for artificial signal power
ax.grid(True)

# Initialize lines for each channel
channel_colors = ['purple', 'blue', 'green', 'orange']
lines = []
for i in range(len(source.BCI_params["channel_names"])):
    line, = ax.plot([10], [5], color=channel_colors[i], 
                   label=f'Channel {source.BCI_params["channel_names"][i]}')
    lines.append(line)
ax.legend()

# Create a queue to store PSD data from the processing thread
psd_queue = queue.Queue()

# Process data and calculate PSD
def process_psd():
    print("PSD processing thread started")
    # This will loop continuously, calculating PSD and putting results in the queue
    while True:
        try:
            # Get the latest PSD data from your pipe
            for ch in range(len(source.BCI_params["channel_names"])):
                    if not PSD.psd_store[ch].empty():
                        # Get PSD data (frequencies and power values)
                        freqs, psd_values = PSD.psd_store[ch].get()
                        
                        # Put the data in our visualization queue
                        psd_queue.put((ch, freqs, psd_values))
                        print(f"Got PSD data for channel {ch}")
            
            # Sleep briefly to prevent CPU hogging
            time.sleep(0.1)
            
        except Exception as e:
            print(f"Error in PSD processing: {e}")
            time.sleep(0.5)

# Animation update function
def update(frame):
    # Get all available PSD data
    changed = False
    while not psd_queue.empty():
        ch, freqs, psd_values = psd_queue.get()
        print("freqs:", freqs)
        print("powers:",psd_values)
        lines[ch].set_data(freqs, psd_values)
        changed = True
    
    # If we got new data, adjust y-axis if needed
    if changed:
        ax.relim()
        ax.autoscale_view(scalex=False)  # only autoscale y-axis
    
    return lines

# Start PSD processing in a separate thread
psd_thread = threading.Thread(target=process_psd, daemon=True)
psd_thread.start()

# Add control for stopping the program cleanly
def on_close(event):
    print("Closing the application...")
    if source.is_artificial:
        source.stop_artificial_signal_generator()
    plt.close()

fig.canvas.mpl_connect('close_event', on_close)

# Start animation
ani = animation.FuncAnimation(fig, update, interval=1, blit=True)

print("Starting visualization. Close the plot window to exit.")
plt.show()

# Clean up after plot window closes
if source.is_artificial:
    source.stop_artificial_signal_generator()
server_thread.join(timeout=1.0)
print("Application closed successfully")